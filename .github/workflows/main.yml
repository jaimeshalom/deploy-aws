name: Deploy NestJS on ECR

on:
  push:
    tags:
      # Esto se activa para tags como v1.2.3-dev, v1.2.3-prod, v1.2.3.4-staging, etc.
      # El patrón '*' después del '-' permite cualquier sufijo. La validación del tag
      # en el job 'test-and-lint' se encargará de validar el formato exacto.
      - 'v*.*.*-*'
      - 'v*.*.*.*-*'
    # branches:
    #   - main

# Añade permisos para solicitar el token OIDC
permissions:
  id-token: write      # Necesario para la autenticación OIDC con AWS
  contents: read       # Necesario para actions/checkout
  pull-requests: write # Necesario para infracost/actions/comment (si aplica)

env:
  ECR_REPOSITORY: ${{ vars.PROJECT_NAME }}-${{ vars.ENVIRONMENT }}-ecr-repository

jobs:
  test-and-lint:
    name: Test and Lint
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:6.0.2
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check semantic tag format with environment suffix
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          #regex para permitir vX.Y.Z-sufijo o vX.Y.Z.W-sufijo
          # El sufijo ('env' en -env) debe ser alfanumérico o guiones (al menos 1 carácter)
          if [[ ! "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?-[[:alnum:]-]+$ ]]; then
            echo "❌ El tag '$TAG_NAME' no cumple el formato esperado."
            echo "   Debe ser 'vMAJOR.MINOR.PATCH-env' o 'vMAJOR.MINOR.PATCH.BUILD-env'."
            echo "   'env' debe ser alfanumérico con guiones."
            echo "   Ejemplos: v1.2.3-dev, v1.2.3.4-prod"
            exit 1
          fi
          echo "✅ Tag válido con sufijo de entorno: $TAG_NAME"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION || '22' }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for MongoDB
        run: |
          echo "Waiting for MongoDB to start..."
          i=0
          # Intenta conectar al puerto 27017 de localhost hasta 30 veces
          until nc -z localhost 27017; do
            i=$((i+1))
            if [ $i -ge 30 ]; then
              echo "$(date) - MongoDB service timed out."
              exit 1
            fi
            echo "$(date) - Waiting for MongoDB service... ($i/30)"
            sleep 1
          done
          echo "MongoDB started!"

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Run e2e tests
        env:
          MONGODB_URI: mongodb://localhost:27017/test_db
        run: npm run test:e2e

  check-ecr-and-create:
    name: Ensure ECR Repository Exists
    runs-on: ubuntu-latest
    needs: test-and-lint
    # Necesita permisos OIDC porque interactúa con AWS
    permissions:
      id-token: write
      contents: read # Para checkout del repo terraform
    outputs:
      repository_exists: ${{ steps.check-repo.outputs.exists }} # Mantenemos el output por si acaso
    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Check if ECR repository exists
        id: check-repo
        env:
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }} # Definido al nivel del workflow
        run: |
          echo "Checking for ECR repository: $ECR_REPOSITORY"
          if aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --region "${{ vars.AWS_REGION }}" > /dev/null 2>&1; then
            echo "✅ Repository '$ECR_REPOSITORY' already exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ Repository '$ECR_REPOSITORY' does not exist. Will attempt to create it via Terraform."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # --- Pasos de Terraform (solo si el repo NO existe) ---
      - name: Checkout Terraform Code
        if: steps.check-repo.outputs.exists == 'false'
        uses: actions/checkout@v4
        with:
          repository: 'jaimeshalom/aws-terraform' # Tu repo de Terraform
          path: './terraform-infra'             # Descarga aquí
          # token: ${{ secrets.TERRAFORM_REPO_PAT }} # Si es privado

      - name: Setup Terraform
        if: steps.check-repo.outputs.exists == 'false'
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        if: steps.check-repo.outputs.exists == 'false'
        id: init
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY_PREFIX || 'terraform' }}/${{ vars.PROJECT_NAME }}-${{ vars.ENVIRONMENT }}.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}"
        working-directory: ./terraform-infra

      # Opcional pero recomendado: Validar la configuración
      - name: Terraform Validate
        if: steps.check-repo.outputs.exists == 'false'
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform-infra

      # Aplicar SOLO la creación del ECR Repo usando -target
      - name: Terraform Apply for ECR Repository Only
        if: steps.check-repo.outputs.exists == 'false'
        env:
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_project_name: ${{ vars.PROJECT_NAME }}
          TF_VAR_environment: ${{ vars.ENVIRONMENT }}
          TF_VAR_owner: ${{ vars.OWNER }}
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME }}
          TF_VAR_route53_zone_name: ${{ vars.ROUTE53_ZONE_NAME }}
        run: |
          terraform apply -auto-approve -input=false \
            -target="module.ecs_service.aws_ecr_repository.ecr_repository"
        working-directory: ./terraform-infra

  create-docker-image:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: check-ecr-and-create
    # Necesita permisos OIDC porque interactúa con AWS ECR
    permissions:
      id-token: write
      contents: read # Para checkout
    outputs:
      image_tag: ${{ steps.build-push.outputs.image_tag }}
      image_version: ${{ steps.build-push.outputs.image_version }} # El tag vX.Y.Z-env para metadata
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image with multiple tags
        id: build-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # Usar el nombre del tag que disparó el workflow
          GIT_TAG_NAME: ${{ github.ref_name }} # github.ref_name para tags es el nombre del tag (v1.2.3-dev)
          COMMIT_SHA: ${{ github.sha }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        run: |
          # Sanitización del tag name (v*.*.*-env ya debe cumplir las reglas de Docker, pero sanitizamos por si acaso)
          SANITIZED_TAG=$(echo "$GIT_TAG_NAME" | tr -cd '[:alnum:]-._' | sed 's/^[.-]*//' | sed 's/[.-]*$//' | cut -c 1-50)

          # Tags definitivos
          BASE_TAG="$ECR_REGISTRY/$ECR_REPOSITORY"
          TAG_SHA="$BASE_TAG:${COMMIT_SHA}-${GITHUB_RUN_ID}" # Tag con SHA+RunID (para inmutabilidad)
          TAG_VERSION="$BASE_TAG:$SANITIZED_TAG"             # Tag con el nombre del git tag (vX.Y.Z-env)

          echo "Building and tagging with: $TAG_SHA and $TAG_VERSION"
          docker build -t "$TAG_SHA" -t "$TAG_VERSION" .

          echo "Pushing $TAG_SHA"
          docker push "$TAG_SHA"

          echo "Pushing $TAG_VERSION"
          docker push "$TAG_VERSION"

          # Output para el deploy
          # Se recomienda usar el tag basado en SHA+RunID para el despliegue en ECS/Fargate
          echo "image_tag=${COMMIT_SHA}-${GITHUB_RUN_ID}" >> $GITHUB_OUTPUT
          # Se puede usar el tag basado en el Git tag para metadata si es necesario
          echo "image_version=$SANITIZED_TAG" >> $GITHUB_OUTPUT


  deploy-infra:
    name: Deploy Infrastructure with Terraform
    runs-on: ubuntu-latest
    needs: create-docker-image
    # Necesita permisos OIDC y los otros que ya tenías
    permissions:
      id-token: write       # Para OIDC
      contents: read        # Necesario para checkout
      pull-requests: write  # Necesario para infracost/actions/comment (incluso en push)
    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Checkout Terraform Code
        uses: actions/checkout@v4
        with:
          repository: 'jaimeshalom/aws-terraform'
          path: './terraform-infra' # Directorio donde se descargará el código
          # token: ${{ secrets.TERRAFORM_REPO_PAT }} # Añade esto si el repo Terraform es privado

      # 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        # Puedes fijar una versión si es necesario
        # with:
        #   terraform_version: 1.6.x

      # 4. Terraform Init (en el directorio del código Terraform)
      - name: Terraform Init
        id: init
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY_PREFIX || 'terraform' }}/${{ vars.PROJECT_NAME }}-${{ vars.ENVIRONMENT }}.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}"
        working-directory: ./terraform-infra

      # 5. Terraform Validate (Opcional pero bueno)
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform-infra

      # 6. Terraform Plan (Opcional pero recomendado)
      - name: Terraform Plan
        id: plan
        env:
          # Usamos el image_tag (SHA+RunID) para la definición de tarea
          TF_VAR_image_tag: ${{ needs.create-docker-image.outputs.image_tag }}
          # Pasamos el tag del git repo (vX.Y.Z-env) como variable si es útil para el módulo TF (ej: etiquetar recursos)
          TF_VAR_git_version_tag: ${{ needs.create-docker-image.outputs.image_version }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_project_name: ${{ vars.PROJECT_NAME }}
          TF_VAR_environment: ${{ vars.ENVIRONMENT }}
          TF_VAR_owner: ${{ vars.OWNER }}
          TF_VAR_mongodb_uri: ${{ secrets.MONGODB_URI }} # Usar secrets para valores sensibles
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME }}
          TF_VAR_route53_zone_name: ${{ vars.ROUTE53_ZONE_NAME }}
        run: |
          terraform plan -input=false -no-color -out=tfplan
        working-directory: ./terraform-infra
        # continue-on-error: true # Para ver el plan incluso si falla

      - name: Check Infracost API Key
        id: check_infracost_key
        run: |
          if [ -n "${{ secrets.INFRACOST_API_KEY }}" ]; then
            echo "has_key=true" >> $GITHUB_OUTPUT
          else
            echo "has_key=false" >> $GITHUB_OUTPUT
          fi

      - name: Inform about missing Infracost API Key
        if: steps.check_infracost_key.outputs.has_key == 'false'
        run: |
          echo "::warning:: Infracost API Key (INFRACOST_API_KEY) not configured in GitHub secrets."
          echo "Skipping cost estimation."
          echo "To enable cost estimates, add the INFRACOST_API_KEY secret to your repository or organization."
          echo "You can get a free API key from https://www.infracost.io/pricing"

      # Se instala la CLI de Infracost
      - name: Setup Infracost
        if: steps.check_infracost_key.outputs.has_key == 'true'
        uses: infracost/actions/setup@v3
        # No se necesita API key aquí, solo es la instalación.

      # Ejecutar Infracost si HAY API Key
      - name: Estimate costs using Infracost
        if: steps.check_infracost_key.outputs.has_key == 'true'
        id: infracost_estimate
        run: |
          # Analiza el plan guardado y genera un desglose de costos en JSON
          infracost breakdown --path tfplan \
            --format json \
            --out-file /tmp/infracost.json

          # Opcional: Muestra un resumen en los logs de la action
          echo "--- Infracost Cost Estimate Summary ---"
          infracost breakdown --path tfplan
          echo "-------------------------------------"
        env:
          # ¡IMPORTANTE! Pasar la API Key a Infracost
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          # Pasar GITHUB_TOKEN es buena práctica para que Infracost identifique el repo
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ./terraform-infra
        # Opcional: Evita que el workflow falle si Infracost tiene un problema
        continue-on-error: true

      - name: Estimate cost difference using Infracost
        if: steps.check_infracost_key.outputs.has_key == 'true'
        id: infracost_diff
        run: |
          # Analiza las diferencias de costo en el plan guardado y genera un diff en JSON
          infracost diff --path tfplan \
            --format json \
            --out-file /tmp/infracost-diff.json # El archivo de salida contendrá el diff

          # Opcional: Muestra un resumen del diff en los logs de la action
          echo "--- Infracost Cost Difference Summary ---"
          infracost diff --path tfplan # Muestra el resumen del diff (cambios)
          echo "---------------------------------------"
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ./terraform-infra
        continue-on-error: true

      # 7. Terraform Apply (¡Aquí se aplica!)
      - name: Terraform Apply
        # Puedes añadir condiciones, como sólo aplicar si el plan fue exitoso
        # if: steps.plan.outcome == 'success'
        run: terraform apply -auto-approve -input=false tfplan
        working-directory: ./terraform-infra
